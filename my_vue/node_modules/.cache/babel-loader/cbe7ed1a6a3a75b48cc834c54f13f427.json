{"ast":null,"code":"'use strict';\n\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport buildFullPath from '../core/buildFullPath.js';\nimport buildURL from './../helpers/buildURL.js';\nimport { getProxyForUrl } from 'proxy-from-env';\nimport http from 'http';\nimport https from 'https';\nimport followRedirects from 'follow-redirects';\nimport zlib from 'zlib';\nimport { VERSION } from '../env/data.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport platform from '../platform/index.js';\nimport fromDataURI from '../helpers/fromDataURI.js';\nimport stream from 'stream';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport AxiosTransformStream from '../helpers/AxiosTransformStream.js';\nimport EventEmitter from 'events';\nconst isBrotliSupported = utils.isFunction(zlib.createBrotliDecompress);\nconst {\n  http: httpFollow,\n  https: httpsFollow\n} = followRedirects;\nconst isHttps = /https:?/;\nconst supportedProtocols = platform.protocols.map(protocol => {\n  return protocol + ':';\n});\n/**\n * If the proxy or config beforeRedirects functions are defined, call them with the options\n * object.\n *\n * @param {Object<string, any>} options - The options object that was passed to the request.\n *\n * @returns {Object<string, any>}\n */\n\nfunction dispatchBeforeRedirect(options) {\n  if (options.beforeRedirects.proxy) {\n    options.beforeRedirects.proxy(options);\n  }\n\n  if (options.beforeRedirects.config) {\n    options.beforeRedirects.config(options);\n  }\n}\n/**\n * If the proxy or config afterRedirects functions are defined, call them with the options\n *\n * @param {http.ClientRequestArgs} options\n * @param {AxiosProxyConfig} configProxy\n * @param {string} location\n *\n * @returns {http.ClientRequestArgs}\n */\n\n\nfunction setProxy(options, configProxy, location) {\n  let proxy = configProxy;\n\n  if (!proxy && proxy !== false) {\n    const proxyUrl = getProxyForUrl(location);\n\n    if (proxyUrl) {\n      proxy = new URL(proxyUrl);\n    }\n  }\n\n  if (proxy) {\n    // Basic proxy authorization\n    if (proxy.username) {\n      proxy.auth = (proxy.username || '') + ':' + (proxy.password || '');\n    }\n\n    if (proxy.auth) {\n      // Support proxy auth object form\n      if (proxy.auth.username || proxy.auth.password) {\n        proxy.auth = (proxy.auth.username || '') + ':' + (proxy.auth.password || '');\n      }\n\n      const base64 = Buffer.from(proxy.auth, 'utf8').toString('base64');\n      options.headers['Proxy-Authorization'] = 'Basic ' + base64;\n    }\n\n    options.headers.host = options.hostname + (options.port ? ':' + options.port : '');\n    options.hostname = proxy.hostname; // Replace 'host' since options is not a URL object\n\n    options.host = proxy.hostname;\n    options.port = proxy.port;\n    options.path = location;\n\n    if (proxy.protocol) {\n      options.protocol = proxy.protocol;\n    }\n  }\n\n  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {\n    // Configure proxy for redirected request, passing the original config proxy to apply\n    // the exact same logic as if the redirected request was performed by axios directly.\n    setProxy(redirectOptions, configProxy, redirectOptions.href);\n  };\n}\n/*eslint consistent-return:0*/\n\n\nexport default function httpAdapter(config) {\n  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n    let data = config.data;\n    const responseType = config.responseType;\n    const responseEncoding = config.responseEncoding;\n    const method = config.method.toUpperCase();\n    let isFinished;\n    let isDone;\n    let rejected = false;\n    let req; // temporary internal emitter until the AxiosRequest class will be implemented\n\n    const emitter = new EventEmitter();\n\n    function onFinished() {\n      if (isFinished) return;\n      isFinished = true;\n\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(abort);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', abort);\n      }\n\n      emitter.removeAllListeners();\n    }\n\n    function done(value, isRejected) {\n      if (isDone) return;\n      isDone = true;\n\n      if (isRejected) {\n        rejected = true;\n        onFinished();\n      }\n\n      isRejected ? rejectPromise(value) : resolvePromise(value);\n    }\n\n    const resolve = function resolve(value) {\n      done(value);\n    };\n\n    const reject = function reject(value) {\n      done(value, true);\n    };\n\n    function abort(reason) {\n      emitter.emit('abort', !reason || reason.type ? new CanceledError(null, config, req) : reason);\n    }\n\n    emitter.once('abort', reject);\n\n    if (config.cancelToken || config.signal) {\n      config.cancelToken && config.cancelToken.subscribe(abort);\n\n      if (config.signal) {\n        config.signal.aborted ? abort() : config.signal.addEventListener('abort', abort);\n      }\n    } // Parse url\n\n\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    const parsed = new URL(fullPath);\n    const protocol = parsed.protocol || supportedProtocols[0];\n\n    if (protocol === 'data:') {\n      let convertedData;\n\n      if (method !== 'GET') {\n        return settle(resolve, reject, {\n          status: 405,\n          statusText: 'method not allowed',\n          headers: {},\n          config\n        });\n      }\n\n      try {\n        convertedData = fromDataURI(config.url, responseType === 'blob', {\n          Blob: config.env && config.env.Blob\n        });\n      } catch (err) {\n        throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config);\n      }\n\n      if (responseType === 'text') {\n        convertedData = convertedData.toString(responseEncoding);\n\n        if (!responseEncoding || responseEncoding === 'utf8') {\n          data = utils.stripBOM(convertedData);\n        }\n      } else if (responseType === 'stream') {\n        convertedData = stream.Readable.from(convertedData);\n      }\n\n      return settle(resolve, reject, {\n        data: convertedData,\n        status: 200,\n        statusText: 'OK',\n        headers: {},\n        config\n      });\n    }\n\n    if (supportedProtocols.indexOf(protocol) === -1) {\n      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n    }\n\n    const headers = AxiosHeaders.from(config.headers).normalize(); // Set User-Agent (required by some servers)\n    // See https://github.com/axios/axios/issues/69\n    // User-Agent is specified; handle case where no UA header is desired\n    // Only set header if it hasn't been set in config\n\n    headers.set('User-Agent', 'axios/' + VERSION, false);\n    const onDownloadProgress = config.onDownloadProgress;\n    const onUploadProgress = config.onUploadProgress;\n    const maxRate = config.maxRate;\n    let maxUploadRate = undefined;\n    let maxDownloadRate = undefined; // support for https://www.npmjs.com/package/form-data api\n\n    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n      headers.set(data.getHeaders());\n    } else if (data && !utils.isStream(data)) {\n      if (Buffer.isBuffer(data)) {// Nothing to do...\n      } else if (utils.isArrayBuffer(data)) {\n        data = Buffer.from(new Uint8Array(data));\n      } else if (utils.isString(data)) {\n        data = Buffer.from(data, 'utf-8');\n      } else {\n        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n      } // Add Content-Length header if data exists\n\n\n      headers.set('Content-Length', data.length, false);\n\n      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n      }\n    }\n\n    const contentLength = +headers.getContentLength();\n\n    if (utils.isArray(maxRate)) {\n      maxUploadRate = maxRate[0];\n      maxDownloadRate = maxRate[1];\n    } else {\n      maxUploadRate = maxDownloadRate = maxRate;\n    }\n\n    if (data && (onUploadProgress || maxUploadRate)) {\n      if (!utils.isStream(data)) {\n        data = stream.Readable.from(data, {\n          objectMode: false\n        });\n      }\n\n      data = stream.pipeline([data, new AxiosTransformStream({\n        length: utils.toFiniteNumber(contentLength),\n        maxRate: utils.toFiniteNumber(maxUploadRate)\n      })], utils.noop);\n      onUploadProgress && data.on('progress', progress => {\n        onUploadProgress(Object.assign(progress, {\n          upload: true\n        }));\n      });\n    } // HTTP basic authentication\n\n\n    let auth = undefined;\n\n    if (config.auth) {\n      const username = config.auth.username || '';\n      const password = config.auth.password || '';\n      auth = username + ':' + password;\n    }\n\n    if (!auth && parsed.username) {\n      const urlUsername = parsed.username;\n      const urlPassword = parsed.password;\n      auth = urlUsername + ':' + urlPassword;\n    }\n\n    auth && headers.delete('authorization');\n    let path;\n\n    try {\n      path = buildURL(parsed.pathname + parsed.search, config.params, config.paramsSerializer).replace(/^\\?/, '');\n    } catch (err) {\n      const customErr = new Error(err.message);\n      customErr.config = config;\n      customErr.url = config.url;\n      customErr.exists = true;\n      return reject(customErr);\n    }\n\n    headers.set('Accept-Encoding', 'gzip, deflate, br', false);\n    const options = {\n      path,\n      method: method,\n      headers: headers.toJSON(),\n      agents: {\n        http: config.httpAgent,\n        https: config.httpsAgent\n      },\n      auth,\n      protocol,\n      beforeRedirect: dispatchBeforeRedirect,\n      beforeRedirects: {}\n    };\n\n    if (config.socketPath) {\n      options.socketPath = config.socketPath;\n    } else {\n      options.hostname = parsed.hostname;\n      options.port = parsed.port;\n      setProxy(options, config.proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n    }\n\n    let transport;\n    const isHttpsRequest = isHttps.test(options.protocol);\n    options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n\n    if (config.transport) {\n      transport = config.transport;\n    } else if (config.maxRedirects === 0) {\n      transport = isHttpsRequest ? https : http;\n    } else {\n      if (config.maxRedirects) {\n        options.maxRedirects = config.maxRedirects;\n      }\n\n      if (config.beforeRedirect) {\n        options.beforeRedirects.config = config.beforeRedirect;\n      }\n\n      transport = isHttpsRequest ? httpsFollow : httpFollow;\n    }\n\n    if (config.maxBodyLength > -1) {\n      options.maxBodyLength = config.maxBodyLength;\n    } else {\n      // follow-redirects does not skip comparison, so it should always succeed for axios -1 unlimited\n      options.maxBodyLength = Infinity;\n    }\n\n    if (config.insecureHTTPParser) {\n      options.insecureHTTPParser = config.insecureHTTPParser;\n    } // Create the request\n\n\n    req = transport.request(options, function handleResponse(res) {\n      if (req.destroyed) return;\n      const streams = [res]; // uncompress the response body transparently if required\n\n      let responseStream = res; // return the last request in case of redirects\n\n      const lastRequest = res.req || req; // if decompress disabled we should not decompress\n\n      if (config.decompress !== false) {\n        // if no content, but headers still say that it is encoded,\n        // remove the header not confuse downstream operations\n        if (data && data.length === 0 && res.headers['content-encoding']) {\n          delete res.headers['content-encoding'];\n        }\n\n        switch (res.headers['content-encoding']) {\n          /*eslint default-case:0*/\n          case 'gzip':\n          case 'compress':\n          case 'deflate':\n            // add the unzipper to the body stream processing pipeline\n            streams.push(zlib.createUnzip()); // remove the content-encoding in order to not confuse downstream operations\n\n            delete res.headers['content-encoding'];\n            break;\n\n          case 'br':\n            if (isBrotliSupported) {\n              streams.push(zlib.createBrotliDecompress());\n              delete res.headers['content-encoding'];\n            }\n\n        }\n      }\n\n      if (onDownloadProgress) {\n        const responseLength = +res.headers['content-length'];\n        const transformStream = new AxiosTransformStream({\n          length: utils.toFiniteNumber(responseLength),\n          maxRate: utils.toFiniteNumber(maxDownloadRate)\n        });\n        onDownloadProgress && transformStream.on('progress', progress => {\n          onDownloadProgress(Object.assign(progress, {\n            download: true\n          }));\n        });\n        streams.push(transformStream);\n      }\n\n      responseStream = streams.length > 1 ? stream.pipeline(streams, utils.noop) : streams[0];\n      const offListeners = stream.finished(responseStream, () => {\n        offListeners();\n        onFinished();\n      });\n      const response = {\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: new AxiosHeaders(res.headers),\n        config,\n        request: lastRequest\n      };\n\n      if (responseType === 'stream') {\n        response.data = responseStream;\n        settle(resolve, reject, response);\n      } else {\n        const responseBuffer = [];\n        let totalResponseBytes = 0;\n        responseStream.on('data', function handleStreamData(chunk) {\n          responseBuffer.push(chunk);\n          totalResponseBytes += chunk.length; // make sure the content length is not over the maxContentLength if specified\n\n          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n            // stream.destroy() emit aborted event before calling reject() on Node.js v16\n            rejected = true;\n            responseStream.destroy();\n            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n          }\n        });\n        responseStream.on('aborted', function handlerStreamAborted() {\n          if (rejected) {\n            return;\n          }\n\n          const err = new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest);\n          responseStream.destroy(err);\n          reject(err);\n        });\n        responseStream.on('error', function handleStreamError(err) {\n          if (req.destroyed) return;\n          reject(AxiosError.from(err, null, config, lastRequest));\n        });\n        responseStream.on('end', function handleStreamEnd() {\n          try {\n            let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n\n            if (responseType !== 'arraybuffer') {\n              responseData = responseData.toString(responseEncoding);\n\n              if (!responseEncoding || responseEncoding === 'utf8') {\n                responseData = utils.stripBOM(responseData);\n              }\n            }\n\n            response.data = responseData;\n          } catch (err) {\n            reject(AxiosError.from(err, null, config, response.request, response));\n          }\n\n          settle(resolve, reject, response);\n        });\n      }\n\n      emitter.once('abort', err => {\n        if (!responseStream.destroyed) {\n          responseStream.emit('error', err);\n          responseStream.destroy();\n        }\n      });\n    });\n    emitter.once('abort', err => {\n      reject(err);\n      req.destroy(err);\n    }); // Handle errors\n\n    req.on('error', function handleRequestError(err) {\n      // @todo remove\n      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n      reject(AxiosError.from(err, null, config, req));\n    }); // set tcp keep alive to prevent drop connection by peer\n\n    req.on('socket', function handleRequestSocket(socket) {\n      // default interval of sending ack packet is 1 minute\n      socket.setKeepAlive(true, 1000 * 60);\n    }); // Handle request timeout\n\n    if (config.timeout) {\n      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.\n      const timeout = parseInt(config.timeout, 10);\n\n      if (isNaN(timeout)) {\n        reject(new AxiosError('error trying to parse `config.timeout` to int', AxiosError.ERR_BAD_OPTION_VALUE, config, req));\n        return;\n      } // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.\n      // And timer callback will be fired, and abort() will be invoked before connection, then get \"socket hang up\" and code ECONNRESET.\n      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.\n      // And then these socket which be hang up will devouring CPU little by little.\n      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.\n\n\n      req.setTimeout(timeout, function handleRequestTimeout() {\n        if (isDone) return;\n        let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n        const transitional = config.transitional || transitionalDefaults;\n\n        if (config.timeoutErrorMessage) {\n          timeoutErrorMessage = config.timeoutErrorMessage;\n        }\n\n        reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, req));\n        abort();\n      });\n    } // Send the request\n\n\n    if (utils.isStream(data)) {\n      let ended = false;\n      let errored = false;\n      data.on('end', () => {\n        ended = true;\n      });\n      data.once('error', err => {\n        errored = true;\n        req.destroy(err);\n      });\n      data.on('close', () => {\n        if (!ended && !errored) {\n          abort(new CanceledError('Request stream has been aborted', config, req));\n        }\n      });\n      data.pipe(req);\n    } else {\n      req.end(data);\n    }\n  });\n}","map":{"version":3,"names":["utils","settle","buildFullPath","buildURL","getProxyForUrl","http","https","followRedirects","zlib","VERSION","transitionalDefaults","AxiosError","CanceledError","platform","fromDataURI","stream","AxiosHeaders","AxiosTransformStream","EventEmitter","isBrotliSupported","isFunction","createBrotliDecompress","httpFollow","httpsFollow","isHttps","supportedProtocols","protocols","map","protocol","dispatchBeforeRedirect","options","beforeRedirects","proxy","config","setProxy","configProxy","location","proxyUrl","URL","username","auth","password","base64","Buffer","from","toString","headers","host","hostname","port","path","beforeRedirect","redirectOptions","href","httpAdapter","Promise","dispatchHttpRequest","resolvePromise","rejectPromise","data","responseType","responseEncoding","method","toUpperCase","isFinished","isDone","rejected","req","emitter","onFinished","cancelToken","unsubscribe","abort","signal","removeEventListener","removeAllListeners","done","value","isRejected","resolve","reject","reason","emit","type","once","subscribe","aborted","addEventListener","fullPath","baseURL","url","parsed","convertedData","status","statusText","Blob","env","err","ERR_BAD_REQUEST","stripBOM","Readable","indexOf","normalize","set","onDownloadProgress","onUploadProgress","maxRate","maxUploadRate","undefined","maxDownloadRate","isFormData","getHeaders","isStream","isBuffer","isArrayBuffer","Uint8Array","isString","length","maxBodyLength","contentLength","getContentLength","isArray","objectMode","pipeline","toFiniteNumber","noop","on","progress","Object","assign","upload","urlUsername","urlPassword","delete","pathname","search","params","paramsSerializer","replace","customErr","Error","message","exists","toJSON","agents","httpAgent","httpsAgent","socketPath","transport","isHttpsRequest","test","agent","maxRedirects","Infinity","insecureHTTPParser","request","handleResponse","res","destroyed","streams","responseStream","lastRequest","decompress","push","createUnzip","responseLength","transformStream","download","offListeners","finished","response","statusCode","statusMessage","responseBuffer","totalResponseBytes","handleStreamData","chunk","maxContentLength","destroy","ERR_BAD_RESPONSE","handlerStreamAborted","handleStreamError","handleStreamEnd","responseData","concat","handleRequestError","handleRequestSocket","socket","setKeepAlive","timeout","parseInt","isNaN","ERR_BAD_OPTION_VALUE","setTimeout","handleRequestTimeout","timeoutErrorMessage","transitional","clarifyTimeoutError","ETIMEDOUT","ECONNABORTED","ended","errored","pipe","end"],"sources":["D:/my_vue/node_modules/axios/lib/adapters/http.js"],"sourcesContent":["'use strict';\n\nimport utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport buildFullPath from '../core/buildFullPath.js';\nimport buildURL from './../helpers/buildURL.js';\nimport {getProxyForUrl} from 'proxy-from-env';\nimport http from 'http';\nimport https from 'https';\nimport followRedirects from 'follow-redirects';\nimport zlib from 'zlib';\nimport {VERSION} from '../env/data.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport platform from '../platform/index.js';\nimport fromDataURI from '../helpers/fromDataURI.js';\nimport stream from 'stream';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport AxiosTransformStream from '../helpers/AxiosTransformStream.js';\nimport EventEmitter from 'events';\n\nconst isBrotliSupported = utils.isFunction(zlib.createBrotliDecompress);\n\nconst {http: httpFollow, https: httpsFollow} = followRedirects;\n\nconst isHttps = /https:?/;\n\nconst supportedProtocols = platform.protocols.map(protocol => {\n  return protocol + ':';\n});\n\n/**\n * If the proxy or config beforeRedirects functions are defined, call them with the options\n * object.\n *\n * @param {Object<string, any>} options - The options object that was passed to the request.\n *\n * @returns {Object<string, any>}\n */\nfunction dispatchBeforeRedirect(options) {\n  if (options.beforeRedirects.proxy) {\n    options.beforeRedirects.proxy(options);\n  }\n  if (options.beforeRedirects.config) {\n    options.beforeRedirects.config(options);\n  }\n}\n\n/**\n * If the proxy or config afterRedirects functions are defined, call them with the options\n *\n * @param {http.ClientRequestArgs} options\n * @param {AxiosProxyConfig} configProxy\n * @param {string} location\n *\n * @returns {http.ClientRequestArgs}\n */\nfunction setProxy(options, configProxy, location) {\n  let proxy = configProxy;\n  if (!proxy && proxy !== false) {\n    const proxyUrl = getProxyForUrl(location);\n    if (proxyUrl) {\n      proxy = new URL(proxyUrl);\n    }\n  }\n  if (proxy) {\n    // Basic proxy authorization\n    if (proxy.username) {\n      proxy.auth = (proxy.username || '') + ':' + (proxy.password || '');\n    }\n\n    if (proxy.auth) {\n      // Support proxy auth object form\n      if (proxy.auth.username || proxy.auth.password) {\n        proxy.auth = (proxy.auth.username || '') + ':' + (proxy.auth.password || '');\n      }\n      const base64 = Buffer\n        .from(proxy.auth, 'utf8')\n        .toString('base64');\n      options.headers['Proxy-Authorization'] = 'Basic ' + base64;\n    }\n\n    options.headers.host = options.hostname + (options.port ? ':' + options.port : '');\n    options.hostname = proxy.hostname;\n    // Replace 'host' since options is not a URL object\n    options.host = proxy.hostname;\n    options.port = proxy.port;\n    options.path = location;\n    if (proxy.protocol) {\n      options.protocol = proxy.protocol;\n    }\n  }\n\n  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {\n    // Configure proxy for redirected request, passing the original config proxy to apply\n    // the exact same logic as if the redirected request was performed by axios directly.\n    setProxy(redirectOptions, configProxy, redirectOptions.href);\n  };\n}\n\n/*eslint consistent-return:0*/\nexport default function httpAdapter(config) {\n  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n    let data = config.data;\n    const responseType = config.responseType;\n    const responseEncoding = config.responseEncoding;\n    const method = config.method.toUpperCase();\n    let isFinished;\n    let isDone;\n    let rejected = false;\n    let req;\n\n    // temporary internal emitter until the AxiosRequest class will be implemented\n    const emitter = new EventEmitter();\n\n    function onFinished() {\n      if (isFinished) return;\n      isFinished = true;\n\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(abort);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', abort);\n      }\n\n      emitter.removeAllListeners();\n    }\n\n    function done(value, isRejected) {\n      if (isDone) return;\n\n      isDone = true;\n\n      if (isRejected) {\n        rejected = true;\n        onFinished();\n      }\n\n      isRejected ? rejectPromise(value) : resolvePromise(value);\n    }\n\n    const resolve = function resolve(value) {\n      done(value);\n    };\n\n    const reject = function reject(value) {\n      done(value, true);\n    };\n\n    function abort(reason) {\n      emitter.emit('abort', !reason || reason.type ? new CanceledError(null, config, req) : reason);\n    }\n\n    emitter.once('abort', reject);\n\n    if (config.cancelToken || config.signal) {\n      config.cancelToken && config.cancelToken.subscribe(abort);\n      if (config.signal) {\n        config.signal.aborted ? abort() : config.signal.addEventListener('abort', abort);\n      }\n    }\n\n    // Parse url\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    const parsed = new URL(fullPath);\n    const protocol = parsed.protocol || supportedProtocols[0];\n\n    if (protocol === 'data:') {\n      let convertedData;\n\n      if (method !== 'GET') {\n        return settle(resolve, reject, {\n          status: 405,\n          statusText: 'method not allowed',\n          headers: {},\n          config\n        });\n      }\n\n      try {\n        convertedData = fromDataURI(config.url, responseType === 'blob', {\n          Blob: config.env && config.env.Blob\n        });\n      } catch (err) {\n        throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config);\n      }\n\n      if (responseType === 'text') {\n        convertedData = convertedData.toString(responseEncoding);\n\n        if (!responseEncoding || responseEncoding === 'utf8') {\n          data = utils.stripBOM(convertedData);\n        }\n      } else if (responseType === 'stream') {\n        convertedData = stream.Readable.from(convertedData);\n      }\n\n      return settle(resolve, reject, {\n        data: convertedData,\n        status: 200,\n        statusText: 'OK',\n        headers: {},\n        config\n      });\n    }\n\n    if (supportedProtocols.indexOf(protocol) === -1) {\n      return reject(new AxiosError(\n        'Unsupported protocol ' + protocol,\n        AxiosError.ERR_BAD_REQUEST,\n        config\n      ));\n    }\n\n    const headers = AxiosHeaders.from(config.headers).normalize();\n\n    // Set User-Agent (required by some servers)\n    // See https://github.com/axios/axios/issues/69\n    // User-Agent is specified; handle case where no UA header is desired\n    // Only set header if it hasn't been set in config\n    headers.set('User-Agent', 'axios/' + VERSION, false);\n\n    const onDownloadProgress = config.onDownloadProgress;\n    const onUploadProgress = config.onUploadProgress;\n    const maxRate = config.maxRate;\n    let maxUploadRate = undefined;\n    let maxDownloadRate = undefined;\n\n    // support for https://www.npmjs.com/package/form-data api\n    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n      headers.set(data.getHeaders());\n    } else if (data && !utils.isStream(data)) {\n      if (Buffer.isBuffer(data)) {\n        // Nothing to do...\n      } else if (utils.isArrayBuffer(data)) {\n        data = Buffer.from(new Uint8Array(data));\n      } else if (utils.isString(data)) {\n        data = Buffer.from(data, 'utf-8');\n      } else {\n        return reject(new AxiosError(\n          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',\n          AxiosError.ERR_BAD_REQUEST,\n          config\n        ));\n      }\n\n      // Add Content-Length header if data exists\n      headers.set('Content-Length', data.length, false);\n\n      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n        return reject(new AxiosError(\n          'Request body larger than maxBodyLength limit',\n          AxiosError.ERR_BAD_REQUEST,\n          config\n        ));\n      }\n    }\n\n    const contentLength = +headers.getContentLength();\n\n    if (utils.isArray(maxRate)) {\n      maxUploadRate = maxRate[0];\n      maxDownloadRate = maxRate[1];\n    } else {\n      maxUploadRate = maxDownloadRate = maxRate;\n    }\n\n    if (data && (onUploadProgress || maxUploadRate)) {\n      if (!utils.isStream(data)) {\n        data = stream.Readable.from(data, {objectMode: false});\n      }\n\n      data = stream.pipeline([data, new AxiosTransformStream({\n        length: utils.toFiniteNumber(contentLength),\n        maxRate: utils.toFiniteNumber(maxUploadRate)\n      })], utils.noop);\n\n      onUploadProgress && data.on('progress', progress => {\n        onUploadProgress(Object.assign(progress, {\n          upload: true\n        }));\n      });\n    }\n\n    // HTTP basic authentication\n    let auth = undefined;\n    if (config.auth) {\n      const username = config.auth.username || '';\n      const password = config.auth.password || '';\n      auth = username + ':' + password;\n    }\n\n    if (!auth && parsed.username) {\n      const urlUsername = parsed.username;\n      const urlPassword = parsed.password;\n      auth = urlUsername + ':' + urlPassword;\n    }\n\n    auth && headers.delete('authorization');\n\n    let path;\n\n    try {\n      path = buildURL(\n        parsed.pathname + parsed.search,\n        config.params,\n        config.paramsSerializer\n      ).replace(/^\\?/, '');\n    } catch (err) {\n      const customErr = new Error(err.message);\n      customErr.config = config;\n      customErr.url = config.url;\n      customErr.exists = true;\n      return reject(customErr);\n    }\n\n    headers.set('Accept-Encoding', 'gzip, deflate, br', false);\n\n    const options = {\n      path,\n      method: method,\n      headers: headers.toJSON(),\n      agents: { http: config.httpAgent, https: config.httpsAgent },\n      auth,\n      protocol,\n      beforeRedirect: dispatchBeforeRedirect,\n      beforeRedirects: {}\n    };\n\n    if (config.socketPath) {\n      options.socketPath = config.socketPath;\n    } else {\n      options.hostname = parsed.hostname;\n      options.port = parsed.port;\n      setProxy(options, config.proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n    }\n\n    let transport;\n    const isHttpsRequest = isHttps.test(options.protocol);\n    options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n    if (config.transport) {\n      transport = config.transport;\n    } else if (config.maxRedirects === 0) {\n      transport = isHttpsRequest ? https : http;\n    } else {\n      if (config.maxRedirects) {\n        options.maxRedirects = config.maxRedirects;\n      }\n      if (config.beforeRedirect) {\n        options.beforeRedirects.config = config.beforeRedirect;\n      }\n      transport = isHttpsRequest ? httpsFollow : httpFollow;\n    }\n\n    if (config.maxBodyLength > -1) {\n      options.maxBodyLength = config.maxBodyLength;\n    } else {\n      // follow-redirects does not skip comparison, so it should always succeed for axios -1 unlimited\n      options.maxBodyLength = Infinity;\n    }\n\n    if (config.insecureHTTPParser) {\n      options.insecureHTTPParser = config.insecureHTTPParser;\n    }\n\n    // Create the request\n    req = transport.request(options, function handleResponse(res) {\n      if (req.destroyed) return;\n\n      const streams = [res];\n\n      // uncompress the response body transparently if required\n      let responseStream = res;\n\n      // return the last request in case of redirects\n      const lastRequest = res.req || req;\n\n      // if decompress disabled we should not decompress\n      if (config.decompress !== false) {\n        // if no content, but headers still say that it is encoded,\n        // remove the header not confuse downstream operations\n        if (data && data.length === 0 && res.headers['content-encoding']) {\n          delete res.headers['content-encoding'];\n        }\n\n        switch (res.headers['content-encoding']) {\n        /*eslint default-case:0*/\n        case 'gzip':\n        case 'compress':\n        case 'deflate':\n          // add the unzipper to the body stream processing pipeline\n          streams.push(zlib.createUnzip());\n\n          // remove the content-encoding in order to not confuse downstream operations\n          delete res.headers['content-encoding'];\n          break;\n        case 'br':\n          if (isBrotliSupported) {\n            streams.push(zlib.createBrotliDecompress());\n            delete res.headers['content-encoding'];\n          }\n        }\n      }\n\n      if (onDownloadProgress) {\n        const responseLength = +res.headers['content-length'];\n\n        const transformStream = new AxiosTransformStream({\n          length: utils.toFiniteNumber(responseLength),\n          maxRate: utils.toFiniteNumber(maxDownloadRate)\n        });\n\n        onDownloadProgress && transformStream.on('progress', progress => {\n          onDownloadProgress(Object.assign(progress, {\n            download: true\n          }));\n        });\n\n        streams.push(transformStream);\n      }\n\n      responseStream = streams.length > 1 ? stream.pipeline(streams, utils.noop) : streams[0];\n\n      const offListeners = stream.finished(responseStream, () => {\n        offListeners();\n        onFinished();\n      });\n\n      const response = {\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: new AxiosHeaders(res.headers),\n        config,\n        request: lastRequest\n      };\n\n      if (responseType === 'stream') {\n        response.data = responseStream;\n        settle(resolve, reject, response);\n      } else {\n        const responseBuffer = [];\n        let totalResponseBytes = 0;\n\n        responseStream.on('data', function handleStreamData(chunk) {\n          responseBuffer.push(chunk);\n          totalResponseBytes += chunk.length;\n\n          // make sure the content length is not over the maxContentLength if specified\n          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n            // stream.destroy() emit aborted event before calling reject() on Node.js v16\n            rejected = true;\n            responseStream.destroy();\n            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded',\n              AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n          }\n        });\n\n        responseStream.on('aborted', function handlerStreamAborted() {\n          if (rejected) {\n            return;\n          }\n\n          const err = new AxiosError(\n            'maxContentLength size of ' + config.maxContentLength + ' exceeded',\n            AxiosError.ERR_BAD_RESPONSE,\n            config,\n            lastRequest\n          );\n          responseStream.destroy(err);\n          reject(err);\n        });\n\n        responseStream.on('error', function handleStreamError(err) {\n          if (req.destroyed) return;\n          reject(AxiosError.from(err, null, config, lastRequest));\n        });\n\n        responseStream.on('end', function handleStreamEnd() {\n          try {\n            let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n            if (responseType !== 'arraybuffer') {\n              responseData = responseData.toString(responseEncoding);\n              if (!responseEncoding || responseEncoding === 'utf8') {\n                responseData = utils.stripBOM(responseData);\n              }\n            }\n            response.data = responseData;\n          } catch (err) {\n            reject(AxiosError.from(err, null, config, response.request, response));\n          }\n          settle(resolve, reject, response);\n        });\n      }\n\n      emitter.once('abort', err => {\n        if (!responseStream.destroyed) {\n          responseStream.emit('error', err);\n          responseStream.destroy();\n        }\n      });\n    });\n\n    emitter.once('abort', err => {\n      reject(err);\n      req.destroy(err);\n    });\n\n    // Handle errors\n    req.on('error', function handleRequestError(err) {\n      // @todo remove\n      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n      reject(AxiosError.from(err, null, config, req));\n    });\n\n    // set tcp keep alive to prevent drop connection by peer\n    req.on('socket', function handleRequestSocket(socket) {\n      // default interval of sending ack packet is 1 minute\n      socket.setKeepAlive(true, 1000 * 60);\n    });\n\n    // Handle request timeout\n    if (config.timeout) {\n      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.\n      const timeout = parseInt(config.timeout, 10);\n\n      if (isNaN(timeout)) {\n        reject(new AxiosError(\n          'error trying to parse `config.timeout` to int',\n          AxiosError.ERR_BAD_OPTION_VALUE,\n          config,\n          req\n        ));\n\n        return;\n      }\n\n      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.\n      // And timer callback will be fired, and abort() will be invoked before connection, then get \"socket hang up\" and code ECONNRESET.\n      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.\n      // And then these socket which be hang up will devouring CPU little by little.\n      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.\n      req.setTimeout(timeout, function handleRequestTimeout() {\n        if (isDone) return;\n        let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n        const transitional = config.transitional || transitionalDefaults;\n        if (config.timeoutErrorMessage) {\n          timeoutErrorMessage = config.timeoutErrorMessage;\n        }\n        reject(new AxiosError(\n          timeoutErrorMessage,\n          transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n          config,\n          req\n        ));\n        abort();\n      });\n    }\n\n\n    // Send the request\n    if (utils.isStream(data)) {\n      let ended = false;\n      let errored = false;\n\n      data.on('end', () => {\n        ended = true;\n      });\n\n      data.once('error', err => {\n        errored = true;\n        req.destroy(err);\n      });\n\n      data.on('close', () => {\n        if (!ended && !errored) {\n          abort(new CanceledError('Request stream has been aborted', config, req));\n        }\n      });\n\n      data.pipe(req);\n    } else {\n      req.end(data);\n    }\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}