{"ast":null,"code":"'use strict';\n\nvar parseUrl = require('url').parse;\n\nvar DEFAULT_PORTS = {\n  ftp: 21,\n  gopher: 70,\n  http: 80,\n  https: 443,\n  ws: 80,\n  wss: 443\n};\n\nvar stringEndsWith = String.prototype.endsWith || function (s) {\n  return s.length <= this.length && this.indexOf(s, this.length - s.length) !== -1;\n};\n/**\n * @param {string|object} url - The URL, or the result from url.parse.\n * @return {string} The URL of the proxy that should handle the request to the\n *  given URL. If no proxy is set, this will be an empty string.\n */\n\n\nfunction getProxyForUrl(url) {\n  var parsedUrl = typeof url === 'string' ? parseUrl(url) : url || {};\n  var proto = parsedUrl.protocol;\n  var hostname = parsedUrl.host;\n  var port = parsedUrl.port;\n\n  if (typeof hostname !== 'string' || !hostname || typeof proto !== 'string') {\n    return ''; // Don't proxy URLs without a valid scheme or host.\n  }\n\n  proto = proto.split(':', 1)[0]; // Stripping ports in this way instead of using parsedUrl.hostname to make\n  // sure that the brackets around IPv6 addresses are kept.\n\n  hostname = hostname.replace(/:\\d*$/, '');\n  port = parseInt(port) || DEFAULT_PORTS[proto] || 0;\n\n  if (!shouldProxy(hostname, port)) {\n    return ''; // Don't proxy URLs that match NO_PROXY.\n  }\n\n  var proxy = getEnv('npm_config_' + proto + '_proxy') || getEnv(proto + '_proxy') || getEnv('npm_config_proxy') || getEnv('all_proxy');\n\n  if (proxy && proxy.indexOf('://') === -1) {\n    // Missing scheme in proxy, default to the requested URL's scheme.\n    proxy = proto + '://' + proxy;\n  }\n\n  return proxy;\n}\n/**\n * Determines whether a given URL should be proxied.\n *\n * @param {string} hostname - The host name of the URL.\n * @param {number} port - The effective port of the URL.\n * @returns {boolean} Whether the given URL should be proxied.\n * @private\n */\n\n\nfunction shouldProxy(hostname, port) {\n  var NO_PROXY = (getEnv('npm_config_no_proxy') || getEnv('no_proxy')).toLowerCase();\n\n  if (!NO_PROXY) {\n    return true; // Always proxy if NO_PROXY is not set.\n  }\n\n  if (NO_PROXY === '*') {\n    return false; // Never proxy if wildcard is set.\n  }\n\n  return NO_PROXY.split(/[,\\s]/).every(function (proxy) {\n    if (!proxy) {\n      return true; // Skip zero-length hosts.\n    }\n\n    var parsedProxy = proxy.match(/^(.+):(\\d+)$/);\n    var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;\n    var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;\n\n    if (parsedProxyPort && parsedProxyPort !== port) {\n      return true; // Skip if ports don't match.\n    }\n\n    if (!/^[.*]/.test(parsedProxyHostname)) {\n      // No wildcards, so stop proxying if there is an exact match.\n      return hostname !== parsedProxyHostname;\n    }\n\n    if (parsedProxyHostname.charAt(0) === '*') {\n      // Remove leading wildcard.\n      parsedProxyHostname = parsedProxyHostname.slice(1);\n    } // Stop proxying if the hostname ends with the no_proxy host.\n\n\n    return !stringEndsWith.call(hostname, parsedProxyHostname);\n  });\n}\n/**\n * Get the value for an environment variable.\n *\n * @param {string} key - The name of the environment variable.\n * @return {string} The value of the environment variable.\n * @private\n */\n\n\nfunction getEnv(key) {\n  return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';\n}\n\nexports.getProxyForUrl = getProxyForUrl;","map":{"version":3,"names":["parseUrl","require","parse","DEFAULT_PORTS","ftp","gopher","http","https","ws","wss","stringEndsWith","String","prototype","endsWith","s","length","indexOf","getProxyForUrl","url","parsedUrl","proto","protocol","hostname","host","port","split","replace","parseInt","shouldProxy","proxy","getEnv","NO_PROXY","toLowerCase","every","parsedProxy","match","parsedProxyHostname","parsedProxyPort","test","charAt","slice","call","key","process","env","toUpperCase","exports"],"sources":["D:/my_vue/node_modules/proxy-from-env/index.js"],"sourcesContent":["'use strict';\n\nvar parseUrl = require('url').parse;\n\nvar DEFAULT_PORTS = {\n  ftp: 21,\n  gopher: 70,\n  http: 80,\n  https: 443,\n  ws: 80,\n  wss: 443,\n};\n\nvar stringEndsWith = String.prototype.endsWith || function(s) {\n  return s.length <= this.length &&\n    this.indexOf(s, this.length - s.length) !== -1;\n};\n\n/**\n * @param {string|object} url - The URL, or the result from url.parse.\n * @return {string} The URL of the proxy that should handle the request to the\n *  given URL. If no proxy is set, this will be an empty string.\n */\nfunction getProxyForUrl(url) {\n  var parsedUrl = typeof url === 'string' ? parseUrl(url) : url || {};\n  var proto = parsedUrl.protocol;\n  var hostname = parsedUrl.host;\n  var port = parsedUrl.port;\n  if (typeof hostname !== 'string' || !hostname || typeof proto !== 'string') {\n    return '';  // Don't proxy URLs without a valid scheme or host.\n  }\n\n  proto = proto.split(':', 1)[0];\n  // Stripping ports in this way instead of using parsedUrl.hostname to make\n  // sure that the brackets around IPv6 addresses are kept.\n  hostname = hostname.replace(/:\\d*$/, '');\n  port = parseInt(port) || DEFAULT_PORTS[proto] || 0;\n  if (!shouldProxy(hostname, port)) {\n    return '';  // Don't proxy URLs that match NO_PROXY.\n  }\n\n  var proxy =\n    getEnv('npm_config_' + proto + '_proxy') ||\n    getEnv(proto + '_proxy') ||\n    getEnv('npm_config_proxy') ||\n    getEnv('all_proxy');\n  if (proxy && proxy.indexOf('://') === -1) {\n    // Missing scheme in proxy, default to the requested URL's scheme.\n    proxy = proto + '://' + proxy;\n  }\n  return proxy;\n}\n\n/**\n * Determines whether a given URL should be proxied.\n *\n * @param {string} hostname - The host name of the URL.\n * @param {number} port - The effective port of the URL.\n * @returns {boolean} Whether the given URL should be proxied.\n * @private\n */\nfunction shouldProxy(hostname, port) {\n  var NO_PROXY =\n    (getEnv('npm_config_no_proxy') || getEnv('no_proxy')).toLowerCase();\n  if (!NO_PROXY) {\n    return true;  // Always proxy if NO_PROXY is not set.\n  }\n  if (NO_PROXY === '*') {\n    return false;  // Never proxy if wildcard is set.\n  }\n\n  return NO_PROXY.split(/[,\\s]/).every(function(proxy) {\n    if (!proxy) {\n      return true;  // Skip zero-length hosts.\n    }\n    var parsedProxy = proxy.match(/^(.+):(\\d+)$/);\n    var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;\n    var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;\n    if (parsedProxyPort && parsedProxyPort !== port) {\n      return true;  // Skip if ports don't match.\n    }\n\n    if (!/^[.*]/.test(parsedProxyHostname)) {\n      // No wildcards, so stop proxying if there is an exact match.\n      return hostname !== parsedProxyHostname;\n    }\n\n    if (parsedProxyHostname.charAt(0) === '*') {\n      // Remove leading wildcard.\n      parsedProxyHostname = parsedProxyHostname.slice(1);\n    }\n    // Stop proxying if the hostname ends with the no_proxy host.\n    return !stringEndsWith.call(hostname, parsedProxyHostname);\n  });\n}\n\n/**\n * Get the value for an environment variable.\n *\n * @param {string} key - The name of the environment variable.\n * @return {string} The value of the environment variable.\n * @private\n */\nfunction getEnv(key) {\n  return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';\n}\n\nexports.getProxyForUrl = getProxyForUrl;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}